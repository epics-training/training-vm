---
# Build a single oac-tree module

- name: "{{ oactree_modules[item].name }} | Check global rebuild flag"
  stat:
    path: "{{ oactree_install_path }}/.flag/REBUILD"
  register: oactree_rebuild_flag

- name: "{{ oactree_modules[item].name }} | Check build directory"
  stat:
    path: "{{ oactree_install_path }}/src/{{ item }}"
  register: oactree_target_dir

- name: "{{ oactree_modules[item].name }} | Clear module build flag"
  ansible.builtin.file:
    path: "{{ oactree_install_path }}/.flag/{{ item }}"
    state: absent
  become: true
  when: oactree_rebuild_flag.stat.exists == true or oactree_target_dir.stat.exists == false

- name: "{{ oactree_modules[item].name }} | Check module build flag"
  stat:
    path: "{{ oactree_install_path }}/.flag/{{ item }}"
  register: oactree_module_flag

- name: "{{ oactree_modules[item].name }} | Set global rebuild flag"
  ansible.builtin.file:
    path: "{{ oactree_install_path }}/.flag/REBUILD"
    state: touch
    modification_time: preserve
    access_time: preserve
  become: true
  when: oactree_module_flag.stat.exists == false

- name: "{{ oactree_modules[item].name }} | Download source ZIP"
  get_url:
    url: "{{ oactree_modules[item].url }}"
    dest: "/tmp/{{ item }}.zip"
  when: oactree_module_flag.stat.exists == false

- name: "{{ oactree_modules[item].name }} | Create extraction directory"
  ansible.builtin.file:
    path: "/tmp/{{ item }}"
    state: directory

- name: "{{ oactree_modules[item].name }} | Extract source ZIP"
  unarchive:
    src: "/tmp/{{ item }}.zip"
    dest: "/tmp/{{ item }}"
    exclude: "{{ oactree_modules[item].exclude | default('[]') }}"
    remote_src: true
  become: true
  when: oactree_module_flag.stat.exists == false

- name: "{{ oactree_modules[item].name }} | Find extracted sources"
  command: ls /tmp/{{ item }}
  register: extract_dir_name
  when: oactree_module_flag.stat.exists == false

- name: "{{ oactree_modules[item].name }} | Remove source directory"
  ansible.builtin.file:
    path: "{{ oactree_install_path }}/src/{{ item }}"
    state: absent
  become: true

- name: "{{ oactree_modules[item].name }} | Move extracted sources in place"
  command: "mv /tmp/{{ item }}/{{ extract_dir_name.stdout }} {{ oactree_install_path }}/src/{{ item }}"
  become: true

- name: "{{ oactree_modules[item].name }} | Create build directory"
  ansible.builtin.file:
    path: "{{ oactree_install_path }}/src/{{ item }}/build"
    state: directory
  become: true
  when: oactree_module_flag.stat.exists == false

- name: "{{ oactree_modules[item].name }} | Run cmake"
  command:
    chdir: "{{ oactree_install_path }}/src/{{ item }}/build"
    cmd: "cmake -DCMAKE_INSTALL_PREFIX={{ oactree_install_path }} .."
  environment:
    EPICS_BASE: /opt/epics/base-7.0.9
    EPICS_HOST_ARCH: "linux-{{ ansible_facts['architecture'] }}"
    PVXS_DIR: /opt/epics/pvxs-1.3.1
  become: true
  when: oactree_module_flag.stat.exists == false

- name: "{{ oactree_modules[item].name }} | Run make (this may take a while)"
  command: make -j {{ ansible_facts.processor_vcpus }} -C {{ oactree_install_path }}/src/{{ item }}/build
  register: build_result
  become: true
  when: oactree_module_flag.stat.exists == false

- name: "{{ oactree_modules[item].name }} | Run make install"
  command: make -C {{ oactree_install_path }}/src/{{ item }}/build install
  become: true
  when: oactree_module_flag.stat.exists == false and build_result.rc | default(0) == 0

- name: "{{ oactree_modules[item].name }} | Update linker configuration"
  ansible.builtin.command: ldconfig
  become: true
  when: oactree_module_flag.stat.exists == false and build_result.rc | default(0) == 0

- name: "{{ oactree_modules[item].name }} | Clean intermediate build directory"
  ansible.builtin.file:
    path: "{{ oactree_install_path }}/src/{{ item }}/build"
    state: absent
  become: true
  when: oactree_module_flag.stat.exists == false and build_result.rc | default(0) == 0

- name: "{{ oactree_modules[item].name }} | Show build result"
  debug:
    msg: "Building {{ oactree_modules[item].name }} {{ 'was successful' if build_result.rc == 0 else 'failed' }}"
  when: oactree_module_flag.stat.exists == false

- name: "{{ oactree_modules[item].name }} | Create oac-tree.sh fragment"
  copy:
    content: "PATH={{ oactree_install_path }}/bin:$PATH\n"
    dest: "{{ oactree_install_path }}/oac-tree.sh.d/00-oac-tree"
  become: true

- name: "{{ oactree_modules[item].name }} | Update (re-assemble) oac-tree.sh"
  assemble:
    src: "{{ oactree_install_path }}/oac-tree.sh.d"
    dest: "/etc/profile.d/oac-tree.sh"
  become: true

- name: "{{ oactree_modules[item].name }} | Create module build flag"
  copy:
    content: ""
    dest: "{{ oactree_install_path }}/.flag/{{ item }} }}"
  become: true
  when: build_result.rc | default(0) == 0 and oactree_module_flag.stat.exists == false
