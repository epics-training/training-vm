---
- name: Ensure bluesky directory exists
  ansible.builtin.file:
    path: "{{ bluesky_deployment_dir_path }}"
    state: directory

- name: Clone bluesky-container from GitLab repository
  ansible.builtin.git:
    repo: "{{ bluesky_container_repo_url }}"
    dest: "{{ bluesky_deployment_dir_path }}"
    version: "{{ bluesky_container_branch }}"
    clone: true
    update: true
    force: true # required for update with WORKAROUND (see below)

- name: Create sub-directory (data, user) inside bluesky directory
  ansible.builtin.file:
    path: "{{ bluesky_deployment_dir_path }}/{{ item }}"
    state: directory
  loop: "{{ sub_directories }}"

- name: Create history.sqlite file
  ansible.builtin.file:
    path: "{{ bluesky_deployment_dir_path }}/history.sqlite"
    state: touch

- name: Ensure the script is executable
  ansible.builtin.file:
    path: "{{ bluesky_deployment_dir_path }}/run_bluesky.sh"
    mode: "0755"

# Check if .bluesky_config file exists
- name: Check if the .bluesky_config file exists
  ansible.builtin.stat:
    path: "{{ home_directory }}/.bluesky_config"
  register: file_stat

# Delete .bluesky_config file if exists
- name: Delete the .bluesky_config file if it exists
  ansible.builtin.file:
    path: "{{ home_directory }}/.bluesky_config"
    state: absent
  when: file_stat.stat.exists | default(false)

# Create .bluesky_config file
- name: Create an empty .bluesky_config file
  ansible.builtin.file:
    path: "{{ home_directory }}/.bluesky_config"
    state: touch

# Add content to .bluesky_config file
- name: Add content to .bluesky_config file
  ansible.builtin.lineinfile:
    path: "{{ home_directory }}/.bluesky_config"
    line: |
      # Bluesky deployment
      alias bluesky_start="{{ bluesky_container_repo_dest }}/run_bluesky.sh"
      alias podman=docker
      # End of Bluesky deployment

# Add content to .bashrc only once; use a marker to facilitate delete during the execution of "undeploy_bluesky.yml"
- name: Add a block to .bashrc only once
  ansible.builtin.blockinfile:
    path: "{{ bashrc_path }}" # Path to the .bashrc
    block: |
      if [ -n "$BASH_VERSION" ] && [ -f "$HOME/.bluesky_config" ]; then
          source "$HOME/.bluesky_config"
      fi
    marker: "# {mark} Execute additional configuration stored in '.bluesky_config' file"
    create: true # Ensures the block is created if it doesn't exist
    state: present

- name: Pull specific container image version (Ubuntu/Debian)
  community.docker.docker_image:
    name: "{{ bluesky_docker_image }}"
    tag: "{{ bluesky_docker_image_tag }}"
    source: pull
    state: present
  when: ansible_distribution in ["Ubuntu", "Debian"]

- name: Pull specific container image version (Rocky/Fedora)
  containers.podman.podman_image:
    name: "{{ bluesky_docker_image }}"
    tag: "{{ bluesky_docker_image_tag }}"
    state: present
  when: ansible_distribution in ["Rocky", "Fedora"]

- name: Restart Docker service (Ubuntu/Debian)
  ansible.builtin.command: "sudo systemctl restart docker"
  when: ansible_distribution in ["Ubuntu", "Debian"]

- name: Restart Podman service (Rocky/Fedora)
  ansible.builtin.command: "sudo systemctl restart podman"
  when: ansible_distribution in ["Rocky", "Fedora"]

- name: Create tiled_data directory
  ansible.builtin.file:
    path: "{{ home_directory }}/.bluesky/tiled_data"
    state: directory
    mode: '0777'
    
# Needed to determine the used ports further down
- name: Start context containers
  command: "{{ docker }} compose up -d"
  args:
    chdir: "{{ bluesky_deployment_dir_path }}"

# If the firewall is running, open some ports
- name: Populate service facts
  ansible.builtin.service_facts:

- name: Configure the firewall
  include_tasks:
    file: firewalld.yml
  when: ('filewalld' in ansible_facts.services) and (ansible_facts.services['firewalld'].state == 'running')

- name: Configure UFW
  include_tasks:
    file: ufw.yml
  when: ('ufw' in ansible_facts.services) and (ansible_facts.services['ufw'].state == 'running')

# Cleanup to avoid interaction with other traini ng modules
- name: Stop context containers
  command: "{{ docker }} compose down"
  args:
    chdir: "{{ bluesky_deployment_dir_path }}"

