# -*- mode: ruby -*-
# vi: set ft=ruby :


Vagrant.configure("2") do |config|

  if Vagrant.has_plugin?("vagrant-vbguest") then
    config.vbguest.auto_update = false
  end

  require_relative 'common'

  @distros.each do |distro|

    config.vm.define distro[:name] do |this|

      # resize the original base image disk size
      this.vm.disk :disk, size: "150GB", primary: true

      this.vm.synced_folder ".", "/vagrant", disabled: true
      this.vm.synced_folder "../ansible", "/ansible"

      this.vm.box = distro[:box]
      this.vm.hostname = distro[:name]

      this.vm.provider "virtualbox" do |vb|
        vb.name = "epics-training-" + distro[:name]
        vb.gui = true
        vb.customize ["modifyvm", :id, "--ioapic", "on"]
        vb.customize ["modifyvm", :id, "--cpus", @cpus]
        vb.customize ["modifyvm", :id, "--vram", "256"]
        # vb.customize ["modifyvm", :id, "--accelerate3d", "on"]
        vb.customize ["modifyvm", :id, "--graphicscontroller", "vmsvga"]
        vb.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
        vb.customize ["modifyvm", :id, "--draganddrop", "bidirectional"]
        vb.customize ["modifyvm", :id, "--boot1", "disk", "--boot2", "dvd", "--boot3", "none", "--boot4", "none"]
        vb.customize ["modifyvm", :id, "--vrde", "off"]
        vb.memory = "4096"

        # Streamline storage setup
        if distro[:box].eql? "debian/bookworm64"
          vb.customize ["storagectl", :id, "--name", "Floppy Controller Controller", "--remove"]
        end
        if distro[:box].eql? "debian/bookworm64" or distro[:box].eql? "fedora/40-cloud-base"
          vb.customize ["storagectl", :id, "--name", "IDE Controller", "--add", "IDE"]
        end
        vb.customize ["storageattach", :id, "--storagectl", "IDE Controller", "--device", "0", "--port", "0", "--medium", "emptydrive"]
      end

      # Install corporate root CA certificate (PEM or DER format)
      # if it exists here as 'corporate_root_ca.crt'
      if File.exist?("corporate_root_ca.crt")
        this.vm.provision "file", source: "corporate_root_ca.crt", destination: "corporate_root_ca.crt"
        catrust_script = File.read("ca-trust.sh")
        this.vm.provision "trust corporate ca", type: "shell" do |s|
          s.inline = catrust_script
        end
      end

      # Install and run guest-side Ansible
      install_script = File.read("../initial_setup.sh")
      this.vm.provision "initial setup", type: "shell" do |s|
        s.inline = install_script
        s.env = { ansible_args: @ansible_args, installer: distro[:installer] }
      end
    end
  end
end
